{Application 'HFA Assignment' logic file generated by CSPro}
PROC GLOBAL

numeric i,j,k,y; 

numeric bLoadOk; 
  string capi_facility_name; 
function OnStop()
	i = accept("Do you want to save the assignments before exiting",
	            "Yes, Save Data",
				 "No, Don't Save",
				 "Cancel");
	if i = 1 then
		savepartial();
		stop(1);
	elseif i = 2 then
		stop(1);
	else
		reenter;
	endif;
end;

function string GetStaffName(id_staff)
	STAFF_CODE = id_staff;
	if loadcase(STAFF_DICT, STAFF_CODE) then
		GetStaffName = strip(STAFF_NAME);
	else
		GetStaffName = "<Invalid Staff Code>";
	endif;
end;

 
	valueset SelectionV;   
	list string listersNames;
	list listers;

{-------------------------------------------------------------------------------------------------------}
function buildListersList()
	listers.clear();
	listersNames.clear(); 	
	listers.add(ASSIGNER_ID);	
	listersNames.add(GetStaffName(ASSIGNER_ID));
	forcase STAFF_DICT where TEAM_LEAD = ASSIGNER_ID do
		listers.add(STAFF_CODE);	
		listersNames.add(STAFF_NAME);
	endfor;	
end;
 
 
function CheckIfCollected(numeric Checksection)    
	CheckIfCollected=0;
	 Q100 = FAC_ID;	 
	 ID_INTERV = SECT_USER(Checksection);
	if loadcase(HHFA_DICT, Q100, ID_INTERV) then // load HFA data file from the previous interviewer  
		if S_Result(Checksection) in 1,2 then
			if Checksection=1 & soccurs(SECT01) then CheckIfCollected=1;
			elseif Checksection=2  & soccurs(SECT02)  then  CheckIfCollected=1; 
			elseif Checksection=3  & soccurs(SECT03)  then  CheckIfCollected=1;
			elseif Checksection=4  & soccurs(SECT04)  then  CheckIfCollected=1;
			elseif Checksection=5  & soccurs(SECT05)  then  CheckIfCollected=1;
			elseif Checksection=6  & soccurs(SECT06)  then  CheckIfCollected=1;
			elseif Checksection=7  & soccurs(SECT07)  then  CheckIfCollected=1;
			elseif Checksection=8  & soccurs(SECT08)  then  CheckIfCollected=1; 
			elseif Checksection=9  & soccurs(SECT09)  then  CheckIfCollected=1;
			elseif Checksection=10  & soccurs(SECT10)  then  CheckIfCollected=1;
			elseif Checksection=11  & soccurs(SECT11)  then  CheckIfCollected=1;
			elseif Checksection=12  & soccurs(SECT12)  then  CheckIfCollected=1;
			elseif Checksection=13  & soccurs(SECT13)  then  CheckIfCollected=1;
			elseif Checksection=14  & soccurs(SECT14)  then  CheckIfCollected=1;
			elseif Checksection=15  & soccurs(SECT15)  then  CheckIfCollected=1;
			elseif Checksection=16  & soccurs(SECT16)  then  CheckIfCollected=1;
			elseif Checksection=17  & soccurs(SECT17)  then  CheckIfCollected=1;
			elseif Checksection=18  & soccurs(SECT18)  then  CheckIfCollected=1; 
			elseif Checksection=19  & soccurs(SECT19)  then  CheckIfCollected=1;
			elseif Checksection=20  & soccurs(SECT20)  then  CheckIfCollected=1;
			elseif Checksection=21  & soccurs(SECT21)  then  CheckIfCollected=1;
			elseif Checksection=22  & soccurs(SECT22)  then  CheckIfCollected=1;
			elseif Checksection=23  & soccurs(SECT23)  then  CheckIfCollected=1;
			elseif Checksection=24  & soccurs(SECT24)  then  CheckIfCollected=1;
			elseif Checksection=25  & soccurs(SECT25)  then  CheckIfCollected=1;
			elseif Checksection=26  & soccurs(SECT26)  then  CheckIfCollected=1;
			elseif Checksection=27  & soccurs(SECT27)  then  CheckIfCollected=1;
			elseif Checksection=28  & soccurs(SECT28)  then  CheckIfCollected=1; 
			elseif Checksection=29  & soccurs(SECT29)  then  CheckIfCollected=1;
			elseif Checksection=30  & soccurs(SECT30)  then  CheckIfCollected=1;
			elseif Checksection=31  & soccurs(SECT31)  then  CheckIfCollected=1;
			elseif Checksection=32  & soccurs(SECT32)  then  CheckIfCollected=1;
			elseif Checksection=33  & soccurs(SECT33)  then  CheckIfCollected=1;
			elseif Checksection=34  & soccurs(SECT34)  then  CheckIfCollected=1;
			elseif Checksection=35  & soccurs(SECT35)  then  CheckIfCollected=1;
			elseif Checksection=36  & soccurs(SECT36)  then  CheckIfCollected=1;
			elseif Checksection=37  & soccurs(SECT37)  then  CheckIfCollected=1;
			elseif Checksection=38  & soccurs(SECT38)  then  CheckIfCollected=1;
			elseif Checksection=39  & soccurs(SECT39)  then  CheckIfCollected=1;
			elseif Checksection=40  & soccurs(SECT40)  then  CheckIfCollected=1;
			elseif Checksection=41  & soccurs(SECT41)  then  CheckIfCollected=1;
			elseif Checksection=42  & soccurs(SECT42)  then  CheckIfCollected=1;
			elseif Checksection=43  & soccurs(SECT43)  then  CheckIfCollected=1;
			elseif Checksection=44  & soccurs(SECT44)  then  CheckIfCollected=1;
			elseif Checksection=45  & soccurs(SECT45)  then  CheckIfCollected=1;
			elseif Checksection=46  & soccurs(SECT46)  then  CheckIfCollected=1;
			elseif Checksection=47  & soccurs(SECT47)  then  CheckIfCollected=1;
			elseif Checksection=48  & soccurs(SECT48)  then  CheckIfCollected=1;
			elseif Checksection=49  & soccurs(SECT49)  then  CheckIfCollected=1;
			elseif Checksection=50  & soccurs(SECT50)  then  CheckIfCollected=1;
			endif; 
		endif;
	endif;
end; 
 

function writeClusterInput() 
	buildListersList(); 
	 
	for i in ASSIGNMENTS_REC where SECT_FIELDED=1 do  
		startObject();
		writePropertyName("id");
		writeNumericValue(SECT_NUMBER); 
		writePropertyName("Section_Name");
		writeStringValue(getlabel(SECT_NUMBER, SECT_NUMBER));
		writePropertyName("Staff_assigned");
		if SECT_USER in notappl,default, 0 then
			writeStringValue(" Section not assigned"); 
		else 
			writeStringValue(" ("+edit("ZZZZ9", SECT_USER) +") "+GetStaffName(SECT_USER));
		endif; 
		writePropertyName("style");
		if SECT_USER in notappl,default,0  then
			writeStringValue("red");
		else
			if !CheckIfCollected(i) then
				writeStringValue("green");
			else 
				writeStringValue("blue");
			endif;
		endif;
		endObject();	
	enddo; 
end;
 

numeric curPortion = -1;
numeric casesPerPortion = 5;

function string getInputPortion(pIdx)
	curPortion = pIdx;
	string res = "";
	
	numeric pCount = 0;
	
	startJsonWrite();
	startArray();
	
	numeric thereIsMore = false;
	writeClusterInput(); 
	if inc(pCount) >= casesPerPortion then
		thereIsMore = true;
	endif;
	
	if thereIsMore then
		inc(curPortion);
	else
		curPortion = -1;
	endif;
	
	endArray();
	exit endJsonWrite();
end;

function getNextPortionidx()
	exit curPortion;
end;

function exitApp()
	reenter ASSIGN_IN;
end;


function split(string input, alpha(1) splitChar, list string output)
	output.clear();
	string gv_line;
	numeric gv_splNum = 1;
	numeric gv_p = pos(splitChar, input);
	while gv_p do
		output.add(input[1:gv_p - 1]);
		gv_line = input[gv_p + 1:length(strip(input)) - gv_p];
		input = gv_line;
		inc(gv_splNum);
		gv_p = pos(splitChar, input);
	enddo;
	output.add(strip(input)); 
	exit gv_splNum;	
end;


function splitNumbers(string input, alpha(1) splitChar, list output, numeric skipErrors = true)
	list string sl;
	split(input, splitChar, sl);  
	output.clear();
	do  i = 1 while i <= sl.length() by 1
		y = tonumber(sl(i));
		if !(skipErrors & special(y)) then
			output.add(y);
		endif;
	enddo;
	
	exit output.length();
end;


function assignSelected(string selectedClusters, numeric doClear = false)
	list selClust;
	splitNumbers(selectedClusters, ";", selClust); 
	numeric curLister = 0; 
	if !doClear then
		curLister = listersNames.show(tr("Select user to assign the selected sections"));
		if !curLister then
			exit;
		endif;
	else
		numeric conf = errmsg(tr("Confirm deactivation of selected sections")) select(tr("Yes"), continue, tr("No"), continue);
		if conf <> 1 then
			exit;
		endif;
	endif; 
	
	
	//updating assignments
	do  i = 1 while i <= selClust.length() by 1
		if !CheckIfCollected(selClust(i)) then
			if doClear then
				SECT_USER(selClust(i))=0;		
			else
				
				SECT_USER(selClust(i))=listers(curLister);
			endif;
		else
			errmsg("Section %s data has already been collected by %s, \nPlease log onto %s's device to complete any partial interviews",
					getvaluelabel( SECT_NUMBER(selClust(i))),GetStaffName(SECT_USER(selClust(i))), GetStaffName(SECT_USER(selClust(i))));
		endif;
	enddo;
end; 
{//////////////////////////////////////////////////////////////////////////////////////////////////////}
 






PROC HFA_ASSIGNMENT_FF

PROC HFAASSIGNMENTS_LEVEL
preproc  
 bLoadOk = loadcase (cHFA_dict);
 
 if bLoadOK and inValueSet(cHFA_ID) then	// reconfirm country code, tho prob not necessary
 
	ASSIGNER_ID = tonumber(sysparm("Assigner_Code"));
	ENT_TYPE = tonumber(sysparm("EntType"));
	FAC_ID = tonumber(sysparm("Fac_Code"));
	HFA_ASSIGNMENTS.SetDataConnection= tonumber(sysparm("In_SetDataConnection"));

	capi_facility_name = toupper(sysparm("Fac_Name"));
	 
	
	
 else
    errmsg ("Setup File %s not found", filename(cHFA_dict) ); 
    stop (1);
  endif;  

PROC ASSIGN_IN
preproc
	valueset ChoiceValueset=SECT_NUMBER_VS1;
	i = ChoiceValueset.length();
	j=1;
	 while j<=i do
		SECT_NUMBER(j)=ChoiceValueset.codes(j); 
		if SECT_USER(j)=notappl then
			SECT_USER(j)=0;
		endif;
		if j =1 then
			SECT_FIELDED(1) = 1;
		else		
			if count(QUESTION_MAPPING where QACTIVATED=1 and maketext("SECT%02d",j)= QASECTION)>0 then
				SECT_FIELDED(j) = 1;
			else
				SECT_FIELDED(j) = 2;
				SECT_USER(j)=notappl;
			endif;
		endif;
		inc(j);
	enddo; 
	 
	 
postproc
	 savepartial();
PROC ASSIGN_ACTIVATION
preproc
	if ASSIGN_IN =2 then
		ASSIGN_IN=notappl;
 
		if count(ASSIGNMENTS_REC where !Sect_User in 0,notappl,default)<=0 then  
			errmsg(tr("No Section Assignments for Facility: %s, have been assigned.\n Do you wish to proceed as is?"), capi_facility_name) select(tr("Yes, Proceed"), next,tr("No, Reassign"),ASSIGN_IN);
			stop(1);
		endif;
		ASSIGNMENTS_CHECK.view();
		errmsg(tr("Do you confirm Section Assignments for Facility: %s, have been correctly assigned"), capi_facility_name) select(tr("Yes, Proceed"), next,tr("No, Reassign"),ASSIGN_IN);
		skip;
	endif;
	
	string display_options = maketext('{ "width": "%d",' 
                                  '  "height": %d }',
                                  tonumber(getproperty("MaxDisplayWidth")), 
                                  tonumber(getproperty("MaxDisplayHeight")) * .9); 

    numeric res = tonumber(htmlDialog("HFA_assign.html",
                           inputData := "", 
                           displayOptions := display_options));
				
	
	$=1;
	noinput;
	
postproc
	reenter ASSIGN_IN;
 
